{"version":3,"sources":["../server/server.js"],"names":["require","mongooseUniqueValidator","ObjectId","ObjectID","sourceMapSupport","install","express","bodyParser","app","use","qpm","mongodb","processQuery","autoDetect","fieldPattern","dataType","converters","objectId","json","get","req","res","db","mongoose","connect","useNewUrlParser","then","listen","console","log"],"mappings":";;AAAA;;AAEA;;AACA;;;;;;;;;;AAEAA,OAAO,CAAC,gBAAD,CAAP,C,CAEA;;;AACA,IAAMC,uBAAuB,GAAGD,OAAO,CAAC,2BAAD,CAAvC;;AAGA,IAAME,QAAQ,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBG,QAApC;;AAEAC,6BAAiBC,OAAjB;;AAEA,IAAMC,OAAO,GAAGN,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMO,UAAU,GAAGP,OAAO,CAAC,aAAD,CAA1B,C,CAEA;;;AACA,IAAMQ,GAAG,GAAGF,OAAO,EAAnB,C,CAEA;;AACAE,GAAG,CAACC,GAAJ,CAAQH,OAAO,UAAP,CAAe,QAAf,CAAR;;AAGA,IAAII,GAAG,GAAGV,OAAO,CAAC,oBAAD,CAAjB;;AACA,IAAIW,OAAO,GAAGX,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAIY,YAAY,GAAGF,GAAG,CAAC;AACnBG,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA,YAAY,EAAE,MAAhB;AAAwBC,IAAAA,QAAQ,EAAE;AAAlC,GAAD,CADO;AAEnBC,EAAAA,UAAU,EAAE;AAAEC,IAAAA,QAAQ,EAAEN,OAAO,CAACR;AAApB;AAFO,CAAD,CAAtB;AAQAK,GAAG,CAACC,GAAJ,CAAQF,UAAU,CAACW,IAAX,EAAR,E,CAEA;AACA;;AAEAV,GAAG,CAACW,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBA,EAAAA,GAAG,CAACH,IAAJ;AACH,CAFD;AAKA,IAAII,EAAE,GAAG,IAAT;;AAEAC,qBAASC,OAAT,CAAiB,qCAAjB,EAAwD;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAxD,EACKC,IADL;AAAA;AAAA;AAAA;AAAA,wBACU;AAAA;AAAA;AAAA;AAAA;AACFlB,UAAAA,GAAG,CAACmB,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACnBC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,WAFD;;AADE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADV","sourcesContent":["import sourceMapSupport from 'source-map-support'\n// import queryString from 'query-String'\nimport { MongoClient } from 'mongodb';\nimport mongoose from \"mongoose\";\nimport { Schema } from \"mongoose\";\nrequire('babel-polyfill');\n\n// UNIQUE VALIDATOR\nconst mongooseUniqueValidator = require('mongoose-unique-validator');\n\n\nconst ObjectId = require('mongodb').ObjectID;\n\nsourceMapSupport.install()\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// an instance of express\nconst app = express();\n\n// mounting other middlewares into our server.js\napp.use(express.static('static'));\n\n\nvar qpm = require('query-params-mongo');\nvar mongodb = require('mongodb');\n\nvar processQuery = qpm({\n    autoDetect: [{ fieldPattern: /_id$/, dataType: 'objectId' }],\n    converters: { objectId: mongodb.ObjectID }\n});\n\n\n\n\napp.use(bodyParser.json());\n\n// mongoose models\n// OUR SERVER CODE WILL GO HEREa\n\napp.get('/', (req, res) => {\n    res.json(`this is our first server page`);\n})\n\n\nlet db = null;\n\nmongoose.connect('mongodb://127.0.0.1:27017/fika-safe', { useNewUrlParser: true })\n    .then(async () => {\n        app.listen(3000, () => {\n            console.log(\"Listening on port 3000\")\n        });\n    });\n\n"],"file":"server.js"}