{"version":3,"sources":["../server/server.js"],"names":["mongooseUniqueValidator","require","ObjectId","ObjectID","sourceMapSupport","install","express","bodyParser","app","use","qpm","mongodb","processQuery","autoDetect","fieldPattern","dataType","converters","objectId","json","get","req","res","saccoSchema","Schema","_id","mongoose","Types","name","type","String","required","address","registration_number","unique","contacts","email","telephone_number","about","description","website","validate","validator","link","indexOf","message","riderSchema","first_name","surname","last_name","Number","passport_photo","Buffer","license_number","insurance","issue_date","Date","exp_date","passport_ID","number_plate","text","created","now","isActive","Boolean","ratings","numberOfStars","sacco","ref","plugin","Sacco","model","Rider","db","connect","then","client","listen","console","log","err","stack"],"mappings":"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","sourcesContent":["import sourceMapSupport from 'source-map-support'\n// import queryString from 'query-String'\nimport { MongoClient } from 'mongodb';\nimport mongoose from \"mongoose\";\nimport { Schema } from \"mongoose\";\n\n\n\n// UNIQUE VALIDATOR\nconst mongooseUniqueValidator = require('mongoose-unique-validator');\n\n\nconst ObjectId = require('mongodb').ObjectID;\n\nsourceMapSupport.install()\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// an instance of express\nconst app = express();\n\n// mounting other middlewares into our server.js\napp.use(express.static('static'));\n\n\nvar qpm = require('query-params-mongo');\nvar mongodb = require('mongodb');\n\nvar processQuery = qpm({\n    autoDetect: [{ fieldPattern: /_id$/, dataType: 'objectId' }],\n    converters: { objectId: mongodb.ObjectID }\n});\n\n\n\n\napp.use(bodyParser.json());\n// OUR SERVER CODE WILL GO HEREa\n\napp.get('/', (req, res) => {\n    res.json(`this is our first server page`);\n})\n\n\n// SCHEMA BLUEPRINTS\nconst saccoSchema = new Schema({\n    _id: mongoose.Schema.Types.ObjectId,\n    name: {\n        type: String,\n        required: true\n    },\n    address: {\n        type: String,\n        required: false\n    },\n    registration_number: {\n        type: String,\n        required: true,\n        unique: true\n    }, contacts: {\n        email: {\n            type: String,\n            unique: true,\n            required: true\n        },\n        telephone_number: {\n            type: String,\n            required: true,\n            unique: true\n        }\n    },\n    about: {\n        description: String,\n        website: {\n            type: String,\n            validate: {\n                validator: (link) => {\n                    return link.indexOf('https://') === 0;\n                },\n                message: 'Webpage URL must start with https://'\n            }\n        }\n\n    }\n    // ....\n\n});\n\n// rider scheam\nconst riderSchema = new Schema({\n    _id: mongoose.Schema.Types.ObjectId,// hashed\n    name: {\n        first_name: {\n            type: String,\n            required: true\n        },\n        surname: {\n            type: String,\n            required: true\n        },\n        last_name: {\n            type: String,\n            required: true\n        }\n    },\n    telephone_number: {\n        type: Number,\n        required: true\n    },\n    address: {\n        type: String,\n        required: true\n    },\n    passport_photo: {\n        type: Buffer,\n        required: true\n    },\n    license_number: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    insurance: {\n        Number: {\n            type: String,\n            required: true,\n            unique: true\n        },\n        issue_date: {\n            type: Date,\n            required: true,\n        },\n        exp_date: {\n            type: Date,\n            required: true,\n        }\n    },\n    // revisit\n    passport_ID: {\n        type: String,\n        required: true,\n        unique: true\n\n    },\n    number_plate: {\n        type: String,\n        required: true,\n        unique: true,\n        validate: {\n            validator: (text) => {\n                return text.indexOf('K') === 0;\n            },\n            message: 'Invalid number plate'\n        }\n\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    // react states\n    isActive: {\n        type: Boolean,\n        default: true\n    },\n    // TODO challenge on how to implement ratings on the riders\n    ratings: [\n        {\n            numberOfStars: Number,\n        }\n    ],\n    // THIS IS WHERE WE REFERENCE THE RIDER TO THEIR RESPECTIVE SACCOS\n    sacco: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Sacco'\n    },\n\n})\n// USING PLUGINS T\nsaccoSchema.plugin(mongooseUniqueValidator);\nriderSchema.plugin(mongooseUniqueValidator);\n\n// CREATING AND SAVING MONGOOSE MODEL \n// THIS CAN ALSO BE EXPORTED TO ANOTHER MODULARISED FILE\nconst Sacco = mongoose.model('Sacco', saccoSchema);\n\n\nconst Rider = mongoose.model('Rider', riderSchema);\n\n\n\n\nlet db = null;\n\n// Initialize connection once\n// MongoClient.connect(\"mongodb://localhost:27017/test\", (err, client) => {\n//     if (err) throw err;\n\n//     db = client.db('test');\n\n//     // Start the application after the database connection is ready\n//     app.listen(3000, () => {\n//         console.log(\"Listening on port 3001\")\n//     });\n\n// });\n\nmongoose.connect('mongodb://localhost/fika-safe').then((client) => {\n    db = client.db('fika-safe');\n\n    // START THE SERVER\n    app.listen(3000, () => {\n        console.log(\"Listening on port 3001\")\n    });\n}).catch((err) => {\n    console.log(err.stack);\n\n});\n\n"],"file":"server.js"}