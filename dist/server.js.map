{"version":3,"sources":["../server/server.js"],"names":["require","mongooseUniqueValidator","ObjectId","ObjectID","sourceMapSupport","install","express","bodyParser","app","use","qpm","mongodb","processQuery","autoDetect","fieldPattern","dataType","converters","objectId","json","get","req","res","post","new_rider","Rider","body","save","then","rider","console","log","message","status","error","send","new_sacco","Sacco","sacco","err","find","riders_id","params","id","findById","_id","create","result","insertedId","added_rider","put","findByIdAndUpdate","updated_rider","findByIdAndRemove","mongoose","connect","useNewUrlParser","listen"],"mappings":"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","sourcesContent":["import sourceMapSupport from 'source-map-support'\n// import queryString from 'query-String'\nimport { MongoClient } from 'mongodb';\nimport mongoose from \"mongoose\";\nimport { Schema } from \"mongoose\";\nrequire('babel-polyfill');\n\n\n\n// UNIQUE VALIDATOR\nconst mongooseUniqueValidator = require('mongoose-unique-validator');\n\nconst ObjectId = require('mongodb').ObjectID;\n\nsourceMapSupport.install()\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// an instance of express\nconst app = express();\n\n// mounting other middlewares into our server.js\napp.use(express.static('static'));\n\n\nvar qpm = require('query-params-mongo');\nvar mongodb = require('mongodb');\n\nvar processQuery = qpm({\n    autoDetect: [{ fieldPattern: /_id$/, dataType: 'objectId' }],\n    converters: { objectId: mongodb.ObjectID }\n});\n\n\n\n\napp.use(bodyParser.json());\n\n// mongoose models\nimport { Sacco, Rider } from './db.models.js'\n// OUR SERVER CODE WILL GO HERE\n\n// BASIC CRUD APIS\n\napp.get('/', (req, res) => {\n    res.json(`this is our first server page`);\n})\n\napp.post(`/api/riders`, (req, res) => {\n    const new_rider = new Rider(req.body);\n    new_rider.save()\n        .then(rider => {\n            console.log({ message: `The rider was added successfully` })\n            res.status(200).json({ rider });\n        })\n        .catch(error => {\n            res.status(400).send({ message: `Unable to add the rider: ${error}` });\n        });\n});\n\napp.post(`/api/saccos`, (req, res) => {\n    console.log(req.body);\n    const new_sacco = new Sacco(req.body);\n    // if (!new_sacco._id) new_sacco._id = Schema.Types.ObjectId;\n    new_sacco.save()\n        .then(sacco => {\n            console.log({ message: `The sacco was added successfully` })\n            res.status(200).json({ sacco });\n        })\n        .catch(err => {\n            res.status(400).send({ message: `Unable to add the sacco: ${err}` });\n        });\n});\n\n\n/* GET ALL RIDERS */\napp.get('/api/riders', (req, res) => {\n    Rider.find().then(rider => {\n        if (!rider) res.status(404).json({ message: `No avilable Riders in the system` });\n        else res.json(rider);\n    })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\n        });\n});\n\n/* GET SINGLE RIDER BY ID */\napp.get('api/riders/:id', (req, res) => {\n    let riders_id;\n    try {\n        riders_id = new ObjectId(req.params.id);\n    } catch (error) {\n        res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n    }\n    Rider.findById({ _id: riders_id }).then(rider => {\n        if (!rider) res.status(404).json({ message: `No such Rider: ${riders_id}` });\n        else res.json(rider);\n    })\n        .catch(error => {\n            console.log(error);\n            res.status(500).json({ message: `Internal Server Error: ${error}` });\n        }); 0\n});\n\n/* SAVE RIDERS */\napp.post('api/riders', (req, res) => {\n    let new_rider = req.body;\n    Rider.create(new_rider).then((result) => {\n        Rider.findById({ _id: result.insertedId }).then((added_rider => {\n            res.json(added_rider);\n        }))\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\n/* UPDATE PRODUCT */\napp.put('api/riders/:id', (req, res) => {\n    let riders_id;\n    try {\n        riders_id = new ObjectId(req.params.id);\n    } catch (error) {\n        res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n    }\n    const new_rider = req.body;\n\n    Rider.findByIdAndUpdate({ _id: riders_id }, new_rider).find({ _id: riders_id }).then((updated_rider) => {\n        res.json(updated_rider)\n    }).catch((err) => {\n        console.log(err);\n        res.status(500).json({ message: `Unable to update the riders information ${err}` })\n\n    });\n});\n\n\n\n/* DELETE PRODUCT */\napp.delete('api/riders/:id', (req, res) => {\n    let riders_id;\n    try {\n        riders_id = new ObjectId(req.params.id);\n    } catch (error) {\n        res.status(400).send({ message: `Invalid riders ID:${riders_id}` });\n    }\n    // THE REQ.BODY IS OPTIONAL INTHE FINDBYIDANREMOVE METHOD\n    Rider.findByIdAndRemove({ _id: riders_id }, req.body).then((result) => {\n        res.json(result)\n    }).catch((err) => {\n        console.log({ message: `Unable to delelete the riders profile ${err}` })\n    });\n});\n\n\n\n\n\n//creating a connection to mongoose\n\nmongoose.connect('mongodb://127.0.0.1:27017/fika-safe', { useNewUrlParser: true })\n    .then(async () => {\n        app.listen(3000, () => {\n            console.log(\"Listening on port 3000\")\n        });\n    });\n\n"],"file":"server.js"}