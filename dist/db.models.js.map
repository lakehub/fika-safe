{"version":3,"sources":["../server/db.models.js"],"names":["mongooseUniqueValidator","require","saccoSchema","Schema","name","type","String","required","address","registration_number","unique","contacts","email","telephone_number","about","description","website","validate","validator","link","indexOf","message","riderSchema","first_name","sur_name","last_name","Number","passport_photo","Buffer","license_number","insurance","number","issue_date","Date","now","exp_date","passport_ID","number_plate","text","created","isActive","Boolean","ratings","numberOfStars","sacco","Types","ObjectId","ref","plugin","Sacco","mongoose","model","Rider","module","exports"],"mappings":";;AAAA;;;;AAGA;AACA,IAAMA,uBAAuB,GAAGC,OAAO,CAAC,2BAAD,CAAvC,C,CAEA;;;AACA,IAAMC,WAAW,GAAG,IAAIC,gBAAJ,CAAW;AAC3B;AACAC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAE;AAFR,GAFqB;AAM3BC,EAAAA,OAAO,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD,CAEL;;AAFK,GANkB;AAU3BG,EAAAA,mBAAmB,EAAE;AACjBJ,IAAAA,IAAI,EAAEC,MADW;AAEjBC,IAAAA,QAAQ,EAAE,IAFO;AAGjBG,IAAAA,MAAM,EAAE;AAHS,GAVM;AAcxBC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,KAAK,EAAE;AACHP,MAAAA,IAAI,EAAEC,MADH;AAEHI,MAAAA,MAAM,EAAE,IAFL;AAGHH,MAAAA,QAAQ,EAAE;AAHP,KADE;AAMTM,IAAAA,gBAAgB,EAAE;AACdR,MAAAA,IAAI,EAAEC,MADQ;AAEdC,MAAAA,QAAQ,EAAE,IAFI;AAGdG,MAAAA,MAAM,EAAE;AAHM;AANT,GAdc;AA0B3BI,EAAAA,KAAK,EAAE;AACHC,IAAAA,WAAW,EAAET,MADV;AAEHU,IAAAA,OAAO,EAAE;AACLX,MAAAA,IAAI,EAAEC,MADD;AAELW,MAAAA,QAAQ,EAAE;AACNC,QAAAA,SAAS,EAAE,mBAACC,IAAD,EAAU;AACjB,iBAAOA,IAAI,CAACC,OAAL,CAAa,UAAb,MAA6B,CAApC;AACH,SAHK;AAINC,QAAAA,OAAO,EAAE;AAJH;AAFL,KAFN,CAaP;;AAbO;AA1BoB,CAAX,CAApB,C,CA2CA;;AACA,IAAMC,WAAW,GAAG,IAAInB,gBAAJ,CAAW;AAC3B;AACAC,EAAAA,IAAI,EAAE;AACFmB,IAAAA,UAAU,EAAE;AACRlB,MAAAA,IAAI,EAAEC,MADE;AAERC,MAAAA,QAAQ,EAAE;AAFF,KADV;AAKFiB,IAAAA,QAAQ,EAAE;AACNnB,MAAAA,IAAI,EAAEC,MADA;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KALR;AASFkB,IAAAA,SAAS,EAAE;AACPpB,MAAAA,IAAI,EAAEC,MADC;AAEPC,MAAAA,QAAQ,EAAE;AAFH;AATT,GAFqB;AAgB3BM,EAAAA,gBAAgB,EAAE;AACdR,IAAAA,IAAI,EAAEqB,MADQ;AAEdnB,IAAAA,QAAQ,EAAE;AAFI,GAhBS;AAoB3BC,EAAAA,OAAO,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GApBkB;AAwB3BoB,EAAAA,cAAc,EAAE;AACZtB,IAAAA,IAAI,EAAEuB,MADM;AAEZrB,IAAAA,QAAQ,EAAE;AAFE,GAxBW;AA4B3BsB,EAAAA,cAAc,EAAE;AACZxB,IAAAA,IAAI,EAAEC,MADM;AAEZC,IAAAA,QAAQ,EAAE,IAFE;AAGZG,IAAAA,MAAM,EAAE;AAHI,GA5BW;AAiC3BoB,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EAAE;AACJ1B,MAAAA,IAAI,EAAEC,MADF;AAEJ;AACAI,MAAAA,MAAM,EAAE;AAHJ,KADD;AAMPsB,IAAAA,UAAU,EAAE;AACR3B,MAAAA,IAAI,EAAE4B,IADE;AAER;AACA,iBAASA,IAAI,CAACC;AAHN,KANL;AAWPC,IAAAA,QAAQ,EAAE;AACN9B,MAAAA,IAAI,EAAE4B,IADA;AAEN1B,MAAAA,QAAQ,EAAE,KAFJ;AAGN,iBAAS0B,IAAI,CAACC;AAHR;AAXH,GAjCgB;AAkD3B;AACAE,EAAAA,WAAW,EAAE;AACT/B,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE,IAFD;AAGTG,IAAAA,MAAM,EAAE;AAHC,GAnDc;AAyD3B2B,EAAAA,YAAY,EAAE;AACVhC,IAAAA,IAAI,EAAEC,MADI;AAEVC,IAAAA,QAAQ,EAAE,IAFA;AAGVG,IAAAA,MAAM,EAAE,IAHE;AAIVO,IAAAA,QAAQ,EAAE;AACNC,MAAAA,SAAS,EAAE,mBAACoB,IAAD,EAAU;AACjB,eAAOA,IAAI,CAAClB,OAAL,CAAa,GAAb,MAAsB,CAA7B;AACH,OAHK;AAINC,MAAAA,OAAO,EAAE;AAJH;AAJA,GAzDa;AAqE3BkB,EAAAA,OAAO,EAAE;AACLlC,IAAAA,IAAI,EAAE4B,IADD;AAEL,eAASA,IAAI,CAACC;AAFT,GArEkB;AAyE3B;AACAM,EAAAA,QAAQ,EAAE;AACNnC,IAAAA,IAAI,EAAEoC,OADA;AAEN,eAAS;AAFH,GA1EiB;AA8E3B;AACAC,EAAAA,OAAO,EAAE,CACL;AACIC,IAAAA,aAAa,EAAEjB;AADnB,GADK,CA/EkB;AAoF3B;AACAkB,EAAAA,KAAK,EAAE;AACHvC,IAAAA,IAAI,EAAEF,iBAAO0C,KAAP,CAAaC,QADhB;AAEHC,IAAAA,GAAG,EAAE;AAFF;AArFoB,CAAX,CAApB,C,CA2FA;;AACA7C,WAAW,CAAC8C,MAAZ,CAAmBhD,uBAAnB;AACAsB,WAAW,CAAC0B,MAAZ,CAAmBhD,uBAAnB,E,CAEA;AACA;;AACA,IAAMiD,KAAK,GAAGC,qBAASC,KAAT,CAAe,OAAf,EAAwBjD,WAAxB,CAAd;;AACA,IAAMkD,KAAK,GAAGF,qBAASC,KAAT,CAAe,OAAf,EAAwB7B,WAAxB,CAAd,C,CAEA;;;AAGA+B,MAAM,CAACC,OAAP,GAAiB;AACbL,EAAAA,KAAK,EAALA,KADa;AAEbG,EAAAA,KAAK,EAALA;AAFa,CAAjB","sourcesContent":["import mongoose from \"mongoose\";\nimport { Schema } from \"mongoose\";\n\n// UNIQUE PROPERTY VALIDATOR\nconst mongooseUniqueValidator = require('mongoose-unique-validator');\n\n// SCHEMA BLUEPRINTS\nconst saccoSchema = new Schema({\n    // _id: Schema.Types.ObjectId,\n    name: {\n        type: String,\n        required: true\n    },\n    address: {\n        type: String,\n        // required: false\n    },\n    registration_number: {\n        type: String,\n        required: true,\n        unique: true\n    }, contacts: {\n        email: {\n            type: String,\n            unique: true,\n            required: true\n        },\n        telephone_number: {\n            type: String,\n            required: true,\n            unique: true\n        }\n    },\n    about: {\n        description: String,\n        website: {\n            type: String,\n            validate: {\n                validator: (link) => {\n                    return link.indexOf('https://') === 0;\n                },\n                message: 'Webpage URL must start with https://'\n            }\n        }\n\n    }\n    // ....\n\n});\n\n// RIDER SCHEMA\nconst riderSchema = new Schema({\n    // _id: Schema.Types.ObjectId,// hashed\n    name: {\n        first_name: {\n            type: String,\n            required: true\n        },\n        sur_name: {\n            type: String,\n            required: true\n        },\n        last_name: {\n            type: String,\n            required: true\n        }\n    },\n    telephone_number: {\n        type: Number,\n        required: true\n    },\n    address: {\n        type: String,\n        required: true\n    },\n    passport_photo: {\n        type: Buffer,\n        required: false\n    },\n    license_number: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    insurance: {\n        number: {\n            type: String,\n            // required: true,\n            unique: true\n        },\n        issue_date: {\n            type: Date,\n            // required: false,\n            default: Date.now\n        },\n        exp_date: {\n            type: Date,\n            required: false,\n            default: Date.now\n        }\n    },\n    // revisit\n    passport_ID: {\n        type: String,\n        required: true,\n        unique: true\n\n    },\n    number_plate: {\n        type: String,\n        required: true,\n        unique: true,\n        validate: {\n            validator: (text) => {\n                return text.indexOf('K') === 0;\n            },\n            message: 'Invalid number plate'\n        }\n\n    },\n    created: {\n        type: Date,\n        default: Date.now\n    },\n    // react states\n    isActive: {\n        type: Boolean,\n        default: true\n    },\n    // TODO challenge on how to implement ratings on the riders\n    ratings: [\n        {\n            numberOfStars: Number,\n        }\n    ],\n    // THIS IS WHERE WE REFERENCE THE RIDER TO THEIR RESPECTIVE SACCOS\n    sacco: {\n        type: Schema.Types.ObjectId,\n        ref: 'Sacco'\n    },\n\n})\n// USING PLUGINS T\nsaccoSchema.plugin(mongooseUniqueValidator);\nriderSchema.plugin(mongooseUniqueValidator);\n\n// CREATING AND SAVING MONGOOSE MODEL \n// THIS CAN ALSO BE EXPORTED TO ANOTHER MODULARISED FILE\nconst Sacco = mongoose.model('Sacco', saccoSchema);\nconst Rider = mongoose.model('Rider', riderSchema);\n\n// ++INSERTING SOME DATA INTO THE DATABASE++\n\n\nmodule.exports = {\n    Sacco,\n    Rider\n}"],"file":"db.models.js"}