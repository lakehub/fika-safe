{"version":3,"sources":["../server/db.models.js"],"names":["mongooseUniqueValidator","require","saccoSchema","Schema","name","type","String","required","address","registration_number","unique","contacts","email","telephone_number","about","description","website","validate","validator","link","indexOf","message","riderSchema","first_name","sur_name","last_name","Number","passport_photo","Buffer","license_number","insurance","number","issue_date","Date","now","exp_date","passport_ID","number_plate","text","created","isActive","Boolean","ratings","numberOfStars","sacco","mongoose","Types","ObjectId","ref","plugin","Sacco","model","Rider","module","exports"],"mappings":"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","sourcesContent":["import mongoose, { Schema } from 'mongoose';\n\n\n// UNIQUE PROPERTY VALIDATOR\nconst mongooseUniqueValidator = require('mongoose-unique-validator');\n\n// SCHEMA BLUEPRINTS\nconst saccoSchema = new Schema({\n\n  name: {\n    type: String,\n    required: true,\n  },\n  address: {\n    type: String,\n    // required: false\n  },\n  registration_number: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  contacts: {\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    telephone_number: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n  },\n  about: {\n    description: String,\n    website: {\n      type: String,\n      validate: {\n        validator: link => link.indexOf('https://') === 0,\n        message: 'Webpage URL must start with https://',\n      },\n    },\n\n  },\n  // ....\n\n});\n\n// RIDER SCHEMA\nconst riderSchema = new Schema({\n  name: {\n    first_name: {\n      type: String,\n      required: true,\n    },\n    sur_name: {\n      type: String,\n      required: true,\n    },\n    last_name: {\n      type: String,\n      required: true,\n    },\n  },\n  telephone_number: {\n    type: Number,\n    required: true,\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  passport_photo: {\n    type: Buffer,\n    required: false,\n  },\n  license_number: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  insurance: {\n    number: {\n      type: String,\n      // required: true,\n      unique: true,\n    },\n    issue_date: {\n      type: Date,\n      // required: false,\n      default: Date.now,\n    },\n    exp_date: {\n      type: Date,\n      required: false,\n      default: Date.now,\n    },\n  },\n  // revisit\n  passport_ID: {\n    type: String,\n    required: true,\n    unique: true,\n\n  },\n  number_plate: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: {\n      validator: text => text.indexOf('K') === 0,\n      message: 'Invalid number plate',\n    },\n\n  },\n  created: {\n    type: Date,\n    default: Date.now,\n  },\n  // react states\n  isActive: {\n    type: Boolean,\n    default: true,\n  },\n  // TODO challenge on how to implement ratings on the riders\n  ratings: [\n    {\n      numberOfStars: Number,\n    },\n  ],\n  // THIS IS WHERE WE REFERENCE THE RIDER TO THEIR RESPECTIVE SACCOS\n  sacco: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Sacco',\n  },\n\n});\n// USING PLUGINS T\nsaccoSchema.plugin(mongooseUniqueValidator);\nriderSchema.plugin(mongooseUniqueValidator);\n\n// CREATING AND SAVING MONGOOSE MODEL\n// THIS CAN ALSO BE EXPORTED TO ANOTHER MODULARISED FILE\nconst Sacco = mongoose.model('Sacco', saccoSchema);\nconst Rider = mongoose.model('Rider', riderSchema);\n\n// ++INSERTING SOME DATA INTO THE DATABASE++\n\n\nmodule.exports = {\n  Sacco,\n  Rider,\n};\n"],"file":"db.models.js"}